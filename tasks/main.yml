---
- name: Create directories
  file:
    path: "{{ item }}"
    state: directory
  with_items:
    - "{{ docker_graylog_directory }}"

- name: Render templates
  template:
    src: "{{ item }}.j2"
    dest: "{{ docker_graylog_directory }}/{{ item }}"
  with_list:
    - gelf-udp-input.json
    - graylog.conf
    - docker-compose.yml

- name: Enable Syslog UDP input
  when: docker_graylog_enable_syslog_udp_input
  template:
    src: "{{ item }}.j2"
    dest: "{{ docker_graylog_directory }}/{{ item }}"
  with_list:
    - syslog-udp-input.json

- name: Render docker-compose config
  template:
    src: docker-compose.yml.j2
    dest: "{{ docker_graylog_directory }}/docker-compose.yml"

- name: Pull Docker images
  docker_image:
    name: "{{ item.name }}"
    tag: "{{ item.tag }}"
  with_items:
    - name: "{{ docker_graylog_image }}"
      tag: "{{ docker_graylog_tag }}"
    - name: "{{ docker_graylog_mongo_image }}"
      tag: "{{ docker_graylog_mongo_tag }}"
    - name: "{{ docker_graylog_es_image }}"
      tag: "{{ docker_graylog_es_tag }}"

- name: List docker networks
  when: docker_graylog_use_swarm
  command: "docker network ls"
  register: docker_nets
  changed_when: false

- name: Create docker network (swarm)
  when: docker_graylog_use_swarm and docker_graylog_network not in docker_nets.stdout
  command: "docker network create --attachable --driver=overlay {{ docker_graylog_network }}"
  args:
    warn: false

- name: Create docker network (non-swarm)
  when: not docker_graylog_use_swarm
  docker_network:
    name: "{{ docker_graylog_network }}"
    state: present

- name: Start graylog via docker-compose
  when: not docker_graylog_use_swarm
  docker_service:
    state: present
    project_src: "{{ docker_graylog_directory }}"

- name: Start graylog on swarm
  when: docker_graylog_use_swarm
  command: "docker stack deploy --compose-file={{ docker_graylog_directory }}/docker-compose.yml graylog"
  changed_when: false

- name: Wait for graylog to become healthy
  command: |
    docker ps -q --filter "label=org.label-schema.name=Graylog Docker Image" \
                 --filter "health=healthy"
  register: healthy_graylog
  until: healthy_graylog.stdout
  delay: 5
  retries: 20
  changed_when: false

- name: configure LDAP authentication
  when: docker_graylog_enable_ldap
  # This done from inside the graylog container just so that it works even when
  # the graylog api isn't published on a host port
  raw: '
    docker exec -i {{ healthy_graylog.stdout }}
    curl --fail -s -X PUT
    -H ''Content-Type: application/json''
    -H ''X-Requested-By: cli''
    -d ''{
    "enabled": true,
    "system_username": {{ docker_graylog_ldap_system_username | to_json }},
    "system_password": {{ docker_graylog_ldap_system_password | to_json }},
    "ldap_uri": {{ docker_graylog_ldap_uri | to_json }},
    "use_start_tls": {{ docker_graylog_ldap_use_start_tls | to_json }},
    "trust_all_certificates": {{ docker_graylog_ldap_trust_all_certificates | to_json }},
    "active_directory": {{ docker_graylog_ldap_active_directory | to_json }},
    "search_base": {{ docker_graylog_ldap_search_base | to_json }},
    "search_pattern": {{ docker_graylog_ldap_search_pattern | to_json }},
    "display_name_attribute": {{ docker_graylog_ldap_display_name_attribute | to_json }},
    "default_group": {{ docker_graylog_ldap_default_group | to_json }},
    "group_mapping": {{ docker_graylog_ldap_group_mapping | to_json }},
    "group_search_base": {{ docker_graylog_ldap_group_search_base | to_json }},
    "group_id_attribute": {{ docker_graylog_ldap_group_id_attribute | to_json }},
    "additional_default_groups": {{ docker_graylog_ldap_additional_default_groups | to_json }},
    "group_search_pattern": {{ docker_graylog_ldap_group_search_pattern | to_json }}
    }''
    "http://admin:{{ docker_graylog_root_password }}@127.0.0.1:{{ docker_graylog_web_port }}/api/system/ldap/settings"'
  changed_when: false
